Here's the fully reordered domain following the optimization rules:

```pddl
(define (domain genome-edit-distance)
(:requirements :equality :action-costs)
  (:predicates
   ;; Static predicates first
   (duplicate ?x ?y)
   (swappable ?x ?y)
   (cw ?x ?y)
   (present ?x)
   (free ?x)
   (gone ?x)
   (normal ?x)
   (inverted ?x)

   ;; Operation sequencing predicates
   (idle)
   (cutting)
   (have-cut)
   (splicing)
   (splicing-last)
   (inverse-splicing)
   (inverse-splicing-last)
   (finished)

   ;; Auxiliary predicates
   (splice-next ?x)
   (inverse-splice-next ?x)
   (cut-point-1 ?x)
   (cut-point-2 ?x)
   (last-cut-point ?x)
   (splice-point-1 ?x)
   (splice-point-2 ?x)
   (s-first ?x)
   (s-next ?x ?y)
   (s-last ?x)
   )

  (:functions
   (total-cost)
   )

  ;; Simple actions first
  (:action invert-single-gene-A
   :parameters (?x)
   :precondition (and (idle) (normal ?x))
   :effect (and (not (normal ?x)) (inverted ?x) (increase (total-cost) 1))
   )

  (:action invert-single-gene-B
   :parameters (?x)
   :precondition (and (idle) (inverted ?x))
   :effect (and (not (inverted ?x)) (normal ?x) (increase (total-cost) 1))
   )

  ;; Cutting operations
  (:action begin-cut
   :parameters (?x ?y)
   :precondition (and (not (= ?x ?y)) (idle) (cw ?x ?y))
   :effect (and (not (idle)) (cutting) (not (cw ?x ?y))
                (cut-point-1 ?x) (last-cut-point ?x)
                (s-first ?y) (s-last ?y))
   )

  (:action continue-cut
   :parameters (?x ?y)
   :precondition (and (not (= ?x ?y)) (cutting) (s-last ?x) (cw ?x ?y))
   :effect (and (not (cw ?x ?y)) (not (s-last ?x))
                (s-next ?x ?y) (s-last ?y))
   )

  (:action end-cut-1
   :parameters (?x ?y)
   :precondition (and (not (= ?x ?y)) (cutting) (s-last ?x) (cw ?x ?y))
   :effect (and (not (cw ?x ?y)) (cut-point-2 ?y))
   )

  (:action end-cut-2
   :parameters (?x ?y)
   :precondition (and (cutting) (cut-point-1 ?x) (cut-point-2 ?y))
   :effect (and (not (cutting)) (not (cut-point-1 ?x)) (not (cut-point-2 ?y))
                (have-cut) (cw ?x ?y))
   )

  ;; Splicing operations
  (:action begin-transpose-splice
   :parameters (?x ?y)
   :precondition (and (not (= ?x ?y)) (have-cut) (cw ?x ?y))
   :effect (and (not (have-cut)) (not (cw ?x ?y)) (splicing)
                (splice-point-1 ?x) (splice-point-2 ?y)
                (increase (total-cost) 2))
   )

  (:action continue-splice-1
   :parameters (?x ?y)
   :precondition (and (splicing) (s-first ?x) (s-next ?x ?y))
   :effect (and (not (s-first ?x)) (not (s-next ?x ?y)) (not (splicing))
                (s-first ?y) (splice-next ?x))
   )

  (:action continue-splice-2
   :parameters (?x ?y)
   :precondition (and (splice-next ?x) (splice-point-1 ?y))
   :effect (and (not (splice-point-1 ?y)) (not (splice-next ?x))
                (cw ?y ?x) (splice-point-1 ?x) (splicing))
   )

  (:action end-splice-1
   :parameters (?x ?y)
   :precondition (and (splicing) (splice-point-1 ?y) (s-first ?x) (s-last ?x))
   :effect (and (not (splicing)) (not (s-first ?x)) (not (s-last ?x))
                (not (splice-point-1 ?y)) (splicing-last)
                (cw ?y ?x) (splice-point-1 ?x))
   )

  (:action end-splice-2
   :parameters (?x ?y)
   :precondition (and (splicing-last) (splice-point-1 ?x) (splice-point-2 ?y))
   :effect (and (not (splicing-last)) (not (splice-point-1 ?x))
                (not (splice-point-2 ?y)) (finished) (cw ?x ?y))
   )

  ;; Inverse splicing operations
  (:action begin-transverse-splice
   :parameters (?x ?y)
   :precondition (and (not (= ?x ?y)) (have-cut) (cw ?x ?y))
   :effect (and (not (have-cut)) (not (cw ?x ?y)) (inverse-splicing)
                (splice-point-1 ?x) (splice-point-2 ?y)
                (increase (total-cost) 2))
   )

  (:action begin-inverse-splice
   :parameters (?x ?y)
   :precondition (and (not (= ?x ?y)) (have-cut) (cw ?x ?y) (last-cut-point ?x))
   :effect (and (not (have-cut)) (not (cw ?x ?y)) (inverse-splicing)
                (splice-point-1 ?x) (splice-point-2 ?y)
                (increase (total-cost) 1))
   )

  (:action begin-inverse-splice-special-case
   :parameters (?x)
   :precondition (and (have-cut) (cw ?x ?x) (last-cut-point ?x))
   :effect (and (not (have-cut)) (not (cw ?x ?x)) (inverse-splicing)
                (splice-point-1 ?x) (splice-point-2 ?x)
                (increase (total-cost) 1))
   )

  (:action continue-inverse-splice-1A
   :parameters (?x ?y)
   :precondition (and (inverse-splicing) (normal ?x) (s-last ?x) (s-next ?y ?x))
   :effect (and (not (s-last ?x)) (not (s-next ?y ?x)) (not (normal ?x))
                (s-last ?y) (not (inverse-splicing))
                (inverse-splice-next ?x) (inverted ?x))
   )

  (:action continue-inverse-splice-1B
   :parameters (?x ?y)
   :precondition (and (inverse-splicing) (inverted ?x) (s-last ?x) (s-next ?y ?x))
   :effect (and (not (s-last ?x)) (not (s-next ?y ?x)) (not (inverted ?x))
                (s-last ?y) (not (inverse-splicing))
                (inverse-splice-next ?x) (normal ?x))
   )

  (:action continue-inverse-splice-2
   :parameters (?x ?y)
   :precondition (and (inverse-splice-next ?x) (splice-point-1 ?y))
   :effect (and (not (inverse-splice-next ?x)) (not (splice-point-1 ?y))
                (inverse-splicing) (cw ?y ?x) (splice-point-1 ?x))
   )

  (:action end-inverse-splice-1A
   :parameters (?x ?y)
   :precondition (and (inverse-splicing) (normal ?x) (splice-point-1 ?y)
                (s-first ?x) (s-last ?x))
   :effect (and (not (inverse-splicing)) (inverse-splicing-last)
                (not (splice-point-1 ?y)) (not (s-first ?x)) (not (s-last ?x))
                (not (normal ?x)) (cw ?y ?x) (splice-point-1 ?x) (inverted ?x))
   )

  (:action end-inverse-splice-1B
   :parameters (?x ?y)
   :precondition (and (inverse-splicing) (inverted ?x) (splice-point-1 ?y)
                (s-first ?x) (s-last ?x))
   :effect (and (not (inverse-splicing)) (inverse-splicing-last)
                (not (splice-point-1 ?y)) (not (s-first ?x)) (not (s-last ?x))
                (not (inverted ?x)) (cw ?y ?x) (splice-point-1 ?x) (normal ?x))
   )

  (:action end-inverse-splice-2
   :parameters (?x ?y)
   :precondition (and (inverse-splicing-last) (splice-point-1 ?x) (splice-point-2 ?y))
   :effect (and (not (inverse-splicing-last)) (not (splice-point-1 ?x))
                (not (splice-point-2 ?y)) (finished) (cw ?x ?y))
   )

  ;; Reset action
  (:action reset-1
   :parameters (?x)
   :precondition (and (finished) (last-cut-point ?x))
   :effect (and (not (last-cut-point ?x)) (not (finished)) (idle))
   )
  )
```