Here's the reordered domain following the optimization rules:

```pddl
(define (domain genome-edit-distance)
(:requirements :equality :action-costs)
  (:predicates
   (duplicate ?x ?y)
   (swappable ?x ?y)
   (present ?x)
   (cw ?x ?y)
   (free ?x)
   (gone ?x)
   (normal ?x)
   (inverted ?x)
   (idle)
   (cutting)
   (have-cut)
   (splicing)
   (splice-next ?x)
   (splicing-last)
   (inverse-splicing)
   (inverse-splice-next ?x)
   (inverse-splicing-last)
   (finished)
   (cut-point-1 ?x)
   (cut-point-2 ?x)
   (last-cut-point ?x)
   (splice-point-1 ?x)
   (splice-point-2 ?x)
   (s-first ?x)
   (s-next ?x ?y)
   (s-last ?x)
   )

  (:functions
   (total-cost)
   )

  (:action begin-cut
   :parameters (?x ?y)
   :precondition (and (not (= ?x ?y))
   :precondition (and (idle)
                     (cw ?x ?y))
   :effect (and (not (idle))
   :effect (and (cutting))
   :effect (and (not (cw ?x ?y)))
   :effect (and (cut-point-1 ?x))
   :effect (and (last-cut-point ?x))
   :effect (and (s-first ?y))
   :effect (and (s-last ?y))
   )

  (:action continue-cut
   :parameters (?x ?y)
   :precondition (and (not (= ?x ?y))
   :precondition (and (cutting)
                      (s-last ?x)
                      (cw ?x ?y))
   :effect (and (not (cw ?x ?y)))
   :effect (and (not (s-last ?x)))
   :effect (and (s-next ?x ?y))
   :effect (and (s-last ?y))
   )

  (:action end-cut-1
   :parameters (?x ?y)
   :precondition (and (not (= ?x ?y))
                      (cutting)
                      (s-last ?x)
                      (cw ?x ?y))
   :effect (and (not (cw ?x ?y)))
   :effect (and (cut-point-2 ?y))
   )

  (:action end-cut-2
   :parameters (?x ?y)
   :precondition (and (cutting)
                      (cut-point-1 ?x)
                      (cut-point-2 ?y))
   :effect (and (not (cutting)))
   :effect (and (not (cut-point-1 ?x)))
   :effect (and (not (cut-point-2 ?y)))
   :effect (and (have-cut))
   :effect (and (cw ?x ?y))
   )

  (:action begin-transpose-splice
   :parameters (?x ?y)
   :precondition (and (not (= ?x ?y))
                      (have-cut)
                      (cw ?x ?y))
   :effect (and (not (have-cut)))
   :effect (and (not (cw ?x ?y)))
   :effect (and (splicing))
   :effect (and (splice-point-1 ?x))
   :effect (and (splice-point-2 ?y))
   :effect (and (increase (total-cost) 2))
   )

  (:action continue-splice-1
   :parameters (?x ?y)
   :precondition (and (splicing)
                      (s-first ?x)
                      (s-next ?x ?y))
   :effect (and (not (s-first ?x)))
   :effect (and (not (s-next ?x ?y)))
   :effect (and (not (splicing)))
   :effect (and (s-first ?y))
   :effect (and (splice-next ?x))
   )

  (:action continue-splice-2
   :parameters (?x ?y)
   :precondition (and (splice-next ?x)
                      (splice-point-1 ?y))
   :effect (and (not (splice-point-1 ?y)))
   :effect (and (not (splice-next ?x)))
   :effect (and (splicing))
   :effect (and (cw ?y ?x))
   :effect (and (splice-point-1 ?x))
   )

  (:action end-splice-1
   :parameters (?x ?y)
   :precondition (and (splicing)
                      (splice-point-1 ?y)
                      (s-first ?x)
                      (s-last ?x))
   :effect (and (not (splicing)))
   :effect (and (not (s-first ?x)))
   :effect (and (not (s-last ?x)))
   :effect (and (not (splice-point-1 ?y)))
   :effect (and (splicing-last))
   :effect (and (cw ?y ?x))
   :effect (and (splice-point-1 ?x))
   )

  (:action end-splice-2
   :parameters (?x ?y)
   :precondition (and (splicing-last)
                      (splice-point-1 ?x)
                      (splice-point-2 ?y))
   :effect (and (not (splicing-last)))
   :effect (and (not (splice-point-1 ?x)))
   :effect (and (not (splice-point-2 ?y)))
   :effect (and (finished))
   :effect (and (cw ?x ?y))
   )

  (:action begin-transverse-splice
   :parameters (?x ?y)
   :precondition (and (not (= ?x ?y))
   :precondition (and (have-cut)
                      (cw ?x ?y))
   :effect (and (not (have-cut)))
   :effect (and (not (cw ?x ?y)))
   :effect (and (inverse-splicing))
   :effect (and (splice-point-1 ?x))
   :effect (and (splice-point-2 ?y))
   :effect (and (increase (total-cost) 2))
   )

  (:action begin-inverse-splice
   :parameters (?x ?y)
   :precondition (and (not (= ?x ?y))
   :precondition (and (have-cut)
                      (cw ?x ?y)
                      (last-cut-point ?x))
   :effect (and (not (have-cut)))
   :effect (and (not (cw ?x ?y)))
   :effect (and (inverse-splicing))
   :effect (and (splice-point-1 ?x))
   :effect (and (splice-point-2 ?y))
   :effect (and (increase (total-cost) 1))
   )

  (:action begin-inverse-splice-special-case
   :parameters (?x)
   :precondition (and (have-cut)
                      (cw ?x ?x)
                      (last-cut-point ?x))
   :effect (and (not (have-cut)))
   :effect (and (not (cw ?x ?x)))
   :effect (and (inverse-splicing))
   :effect (and (splice-point-1 ?x))
   :effect (and (splice-point-2 ?x))
   :effect (and (increase (total-cost) 1))
   )

  (:action continue-inverse-splice-1A
   :parameters (?x ?y)
   :precondition (and (inverse-splicing)
                      (normal ?x)
                      (s-last ?x)
                      (s-next ?y ?x))
   :effect (and (not (s-last ?x)))
   :effect (and (not (s-next ?y ?x)))
   :effect (and (not (normal ?x)))
   :effect (and (s-last ?y))
   :effect (and (not (inverse-splicing)))
   :effect (and (inverse-splice-next ?x))
   :effect (and (inverted ?x))
   )

  (:action continue-inverse-splice-1B
   :parameters (?x ?y)
   :precondition (and (inverse-splicing)
                      (inverted ?x)
                      (s-last ?x)
                      (s-next ?y ?x))
   :effect (and (not (s-last ?x)))
   :effect (and (not (s-next ?y ?x)))
   :effect (and (not (inverted ?x)))
   :effect (and (s-last ?y))
   :effect (and (not (inverse-splicing)))
   :effect (and (inverse-splice-next ?x))
   :effect (and (normal ?x))
   )

  (:action continue-inverse-splice-2
   :parameters (?x ?y)
   :precondition (and (inverse-splice-next ?x)
                      (splice-point-1 ?y))
   :effect (and (not (inverse-splice-next ?x)))
   :effect (and (not (splice-point-1 ?y)))
   :effect (and (inverse-splicing))
   :effect (and (cw ?y ?x))
   :effect (and (splice-point-1 ?x))
   )

  (:action end-inverse-splice-1A
   :parameters (?x ?y)
   :precondition (and (inverse-splicing)
                      (normal ?x)
                      (splice-point-1 ?y)
                      (s-first ?x)
                      (s-last ?x))
   :effect (and (not (inverse-splicing)))
   :effect (and (inverse-splicing-last))
   :effect (and (not (splice-point-1 ?y)))
   :effect (and (not (s-first ?x)))
   :effect (and (not (s-last ?x)))
   :effect (and (not (normal ?x)))
   :effect (and (cw ?y ?x))
   :effect (and (splice-point-1 ?x))
   :effect (and (inverted ?x))
   )

  (:action end-inverse-splice-1B
   :parameters (?x ?y)
   :precondition (and (inverse-splicing)
                      (inverted ?x)
                      (splice-point-1 ?y)
                      (s-first ?x)
                      (s-last ?x))
   :effect (and (not (inverse-splicing)))
   :effect (and (inverse-splicing-last))
   :effect (and (not (splice-point-1 ?y)))
   :effect (and (not (s-first ?x)))
   :effect (and (not (s-last ?x)))
   :effect (and (not (inverted ?x)))
   :effect (and (cw ?y ?x))
   :effect (and (splice-point-1 ?x))
   :effect (and (normal ?x))
   )

  (:action end-inverse-splice-2
   :parameters (?x ?y)
   :precondition (and (inverse-splicing-last)
                      (splice-point-1 ?x)
                      (splice-point-2 ?y))
   :effect (and (not (inverse-splicing-last)))
   :effect (and (not (splice-point-1 ?x)))
   :effect (and (not (splice-point-2 ?y)))
   :effect (and (finished))
   :effect (and (cw ?x ?y))
   )

  (:action invert-single-gene-A
   :parameters (?x)
   :precondition (and (idle)
                      (normal ?x))
   :effect (and (not (normal ?x)))
   :effect (and (inverted ?x))
   :effect (and (increase (total-cost) 1))
   )

  (:action invert-single-gene-B
   :parameters (?x)
   :precondition (and (idle)
                      (inverted ?x))
   :effect (and (not (inverted ?x)))
   :effect (and (normal ?x))
   :effect (and (increase (total-cost) 1))
   )

  (:action reset-1
   :parameters (?x)
   :precondition (and (finished)
                      (last-cut-point ?x))
   :effect (and (not (last-cut-point ?x)))
   :effect (and (not (finished)))
   :effect (and (idle))
   )
  )
```