Step 1: Analyze the domain.
The domain describes actions related to preparing cocktails.  The reordering will prioritize actions and predicates related to grabbing containers, filling and emptying them, and then more complex actions like shaking and pouring between containers. Static predicates will be moved to the top of the predicate list.  Within actions, add effects will precede delete effects, and predicates will be grouped for better readability and potential planner performance gains.  Parameter ordering will be standardized where discrepancies exist.

Step 2: Apply your strategy and output the fully reordered domain.
(define (domain barman)
  (:requirements :strips :typing)
  (:types hand level beverage dispenser container - object
  	  ingredient cocktail - beverage
          shot shaker - container)
  (:predicates 
	(next ?l1 ?l2 - level)
	(cocktail-part1 ?c - cocktail ?i - ingredient)
	(cocktail-part2 ?c - cocktail ?i - ingredient)
	(dispenses ?d - dispenser ?i - ingredient)
	(shaker-empty-level ?s - shaker ?l - level)
        (ontable ?c - container)
	(handempty ?h - hand)
	(holding ?h - hand ?c - container)
        (empty ?c - container)
        (clean ?c - container)	
        (contains ?c - container ?b - beverage)
        (used ?c - container ?b - beverage)
	(shaker-level ?s - shaker ?l - level)
	(unshaked ?s - shaker)
	(shaked ?s - shaker))		
  (:action grasp
             :parameters (?h - hand ?c - container)
             :precondition (and (handempty ?h) (ontable ?c))
             :effect (and (holding ?h ?c)
			  (not (handempty ?h))
	     	     	  (not (ontable ?c))))

  (:action leave
             :parameters (?h - hand ?c - container)
             :precondition (holding ?h ?c)
             :effect (and (handempty ?h)
			  (ontable ?c)
	     	     	  (not (holding ?h ?c))))
  (:action clean-shot
  	   :parameters (?h1 ?h2 - hand ?s - shot)
           :precondition (and (holding ?h1 ?s)
                              (handempty ?h2)
			      (empty ?s)
                              (used ?s ?b))
           :effect (and (clean ?s)
	   	   	(not (used ?s ?b))))

  (:action empty-shot
           :parameters (?h - hand ?p - shot ?b - beverage)
           :precondition (and (holding ?h ?p)
                              (contains ?p ?b))
           :effect (and (empty ?p)
	   	   	(not (contains ?p ?b))))
  (:action fill-shot
           :parameters (?h1 ?h2 - hand ?s - shot ?d - dispenser ?i - ingredient)
           :precondition (and (holding ?h1 ?s)
                              (handempty ?h2)
			      (empty ?s)
			      (clean ?s)
	   		      (dispenses ?d ?i))
           :effect (and (contains ?s ?i)
	   	        (used ?s ?i)
			(not (empty ?s))
	   	   	(not (clean ?s))))


  (:action refill-shot
           :parameters (?h1 ?h2 - hand ?s - shot ?d - dispenser ?i - ingredient)
           :precondition (and (holding ?h1 ?s)	   		      
                              (handempty ?h2)
			      (empty ?s)
			      (used ?s ?i)
	   		      (dispenses ?d ?i))
           :effect (and (contains ?s ?i)
                        (not (empty ?s))))
 (:action pour-shot-to-clean-shaker
           :parameters (?h1 - hand ?s - shot ?d - shaker ?l ?l1 - level ?i - ingredient)
           :precondition (and (holding ?h1 ?s)
			      (contains ?s ?i)
                              (empty ?d)
	   		      (clean ?d)
                              (shaker-level ?d ?l)
                              (next ?l ?l1))
           :effect (and (contains ?d ?i)
			(unshaked ?d)
			(shaker-level ?d ?l1)
	   	   	(empty ?s)
                        (not (empty ?d))
			(not (clean ?d))
			(not (shaker-level ?d ?l))
			(not (contains ?s ?i))))

  (:action pour-shot-to-used-shaker
           :parameters (?h1 - hand ?s - shot ?d - shaker ?l ?l1 - level ?i - ingredient)
           :precondition (and (holding ?h1 ?s)
			      (contains ?s ?i)
                              (unshaked ?d)                              
                              (shaker-level ?d ?l)
                              (next ?l ?l1))
           :effect (and (contains ?d ?i)
			(shaker-level ?d ?l1)
	   	   	(empty ?s)
  			(not (shaker-level ?d ?l))
			(not (contains ?s ?i))))
(:action clean-shaker
  	   :parameters (?h1 ?h2 - hand ?s - shaker)
           :precondition (and (holding ?h1 ?s)
                              (handempty ?h2)
                              (empty ?s))
           :effect (clean ?s))
  (:action empty-shaker
           :parameters (?h - hand ?s - shaker ?b - cocktail ?l ?l1 - level)
           :precondition (and (holding ?h ?s)
                              (contains ?s ?b)
			      (shaked ?s)
			      (shaker-level ?s ?l)
			      (shaker-empty-level ?s ?l1))
           :effect (and (empty ?s)
			(shaker-level ?s ?l1)
	   	   	(not (shaked ?s))
	   	   	(not (shaker-level ?s ?l))			
			(not (contains ?s ?b))))
  (:action shake
  	   :parameters (?h1 ?h2 - hand ?s - shaker ?b - cocktail ?d1 ?d2 - ingredient)
           :precondition (and (holding ?h1 ?s)
                              (handempty ?h2)
			      (contains ?s ?d1)
                              (contains ?s ?d2)
                              (cocktail-part1 ?b ?d1)
			      (cocktail-part2 ?b ?d2)
			      (unshaked ?s))			      
           :effect (and (contains ?s ?b)
			(shaked ?s)
		        (not (unshaked ?s))
		        (not (contains ?s ?d1))
                        (not (contains ?s ?d2))))
  (:action pour-shaker-to-shot
           :parameters (?h - hand ?s - shaker ?d - shot ?l ?l1 - level ?b - beverage)
           :precondition (and (holding ?h ?s)
			      (shaked ?s)
			      (empty ?d)
			      (clean ?d)
			      (contains ?s ?b)
                              (shaker-level ?s ?l)
                              (next ?l1 ?l))
           :effect (and (contains ?d ?b)
			(shaker-level ?s ?l1)
	   	   	(not (clean ?d))
	   	   	(not (empty ?d))			
			(not (shaker-level ?s ?l))))
 )
